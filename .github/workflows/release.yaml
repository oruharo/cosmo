name: release
on:
  push:
    # tags:
    #   - "v*.*.*"
    branches:
      - main
jobs:
  # variables:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: version
  #       run: echo "::set-output name=version::${GITHUB_REF##*/}"
  #   outputs:
  #     version: ${{ steps.version.outputs.version }}

  release_drafter:
    runs-on: ubuntu-latest
    # needs:
    # - variables
    # - goreleaser
    steps:
      - uses: release-drafter/release-drafter@v5
        with:
          # version: ${{ needs.variables.outputs.version }}
          disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs:
      - release_drafter
    steps:
      - name: Use Variables2
        run: echo ${{ needs.release_drafter.outputs.version }}

  goreleaser:
    runs-on: ubuntu-latest
    needs:
      - release_drafter
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: ${{ needs.release_drafter.outputs.version }}
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  controller-manager:
    runs-on: ubuntu-latest
    needs:
      - release_drafter
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ 'ghcr.io/' }}${{ github.repository }}${{ '-controller-manager' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: dockerfile/controller-manager.Dockerfile
          tags: ${{ needs.release_drafter.outputs.version }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  dashboard:
    runs-on: ubuntu-latest
    needs:
      - release_drafter
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ 'ghcr.io/' }}${{ github.repository }}${{ '-dashboard' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: dockerfile/dashboard.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  auth-proxy:
    runs-on: ubuntu-latest
    needs:
      - release_drafter
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ 'ghcr.io/' }}${{ github.repository }}${{ '-auth-proxy' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: dockerfile/auth-proxy.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
